/*START Part 1: SQL Basics - Creating Tables and Inserting Data/Querying Tables/Aggregating Data*/

/*START Part 1: Challenge 1 - Creating Tables and Inserting Data*/

/*1.1.1 Create a database table to store a list of my favorite books.
It should have columns for id, name, and rating(scale of 1-5, 1 being lowest and 5 being highest.*/

CREATE TABLE
    favorite_books (
        id INTEGER PRIMARY KEY,
        name TEXT,
        rating INTEGER
    );

/*1.1.2 Add 3 of my favorite books to the table, and show them.*/

INSERT INTO
    favorite_books
        VALUES (1, "Don Quixote", 5);
INSERT INTO
    favorite_books
        VALUES (2, "Spare Parts", 3);
INSERT INTO
    favorite_books
        VALUES (3, "Redwall", 5);

SELECT
    *
FROM
    favorite_books;

/*END Part 1: Challenge 1 - Creating Tables and Inserting Data*/

/*START Part 1: Challenge 2 - Querying Tables*/

/*1.2.1 Select all the movies in the table below.*/

CREATE TABLE
  movies (
    id INTEGER PRIMARY KEY,
    name TEXT,
    release_year INTEGER
    );

INSERT INTO
  movies
    VALUES (1, "Avatar", 2009);
INSERT INTO
  movies
    VALUES (2, "Titanic", 1997);
INSERT INTO
  movies
    VALUES (3, "Star Wars: Episode IV - A New Hope", 1977);
INSERT INTO
  movies
    VALUES (4, "Shrek 2", 2004);
INSERT INTO
  movies
    VALUES (5, "The Lion King", 1994);
INSERT INTO
  movies
    VALUES (6, "Disney's Up", 2009);

 SELECT
    *
 FROM
    movies;

/*1.2.2 Add a second query after the first, that retrieves only the movies that were released in the year 2000 or later.
 Sort the results so that the earlier movies are listed first.*/

SELECT
    *
FROM
    movies
WHERE
    release_year >= 2000
ORDER BY
    release_year

/*END Part 1: Challenge 2 - Querying Tables*/

/*START Part 1: Challenge 3 - Aggregating Data*/

/*1.3.1 This table contains a TODO list with the number of minutes it will take to complete each item.
 Insert another item to your todo list with the estimated minutes it will take.*/

CREATE TABLE
  todo_list (
    id INTEGER PRIMARY KEY,
    item TEXT,
    minutes INTEGER
    );

INSERT INTO
  todo_list
    VALUES (1, "Wash the dishes", 15);
INSERT INTO
  todo_list
    VALUES (2, "vacuuming", 20);
INSERT INTO
  todo_list
    VALUES (3, "Learn some stuff on KA", 30);
INSERT INTO
  todo_list
    VALUES (4, "Chores", 25);

/*NOTE: "Change oil in car" was added to table*/

INSERT INTO
  todo_list
    VALUES (5, "Change oil in car", 20);

/*1.3.2 Select the SUM of minutes it will take to do all of the items on your TODO list*/

SELECT
    SUM(minutes)
FROM
    todo_list

/*END Part 1: Challenge 3 - Aggregating Data*/

/*END Part 1: SQL Basics - Creating Tables and Inserting Data/Querying Tables/Aggregating Data*/

/*START Part 2: More advanced SQL queries - Using AND/OR to Query/Querying IN Subqueries/Restricting Grouped Results with HAVING/
Calculating Results with CASE*/

/*START Part 2: Challenge 1 - Using AND/OR to Query*/

/*2.1.1 Below is a table with songs. Use queries to decide what songs to sing.
For the first step, select all the song titles.*/

CREATE TABLE songs (
    id INTEGER PRIMARY KEY,
    title TEXT,
    artist TEXT,
    mood TEXT,
    duration INTEGER,
    released INTEGER
    );
    
INSERT INTO
    songs (title, artist, mood, duration, released)
        VALUES ("Bohemian Rhapsody", "Queen", "epic", 60, 1975);
INSERT INTO
    songs (title, artist, mood, duration, released)
        VALUES ("Let it go", "Idina Menzel", "epic", 227, 2013);
INSERT INTO
    songs (title, artist, mood, duration, released)
        VALUES ("I will survive", "Gloria Gaynor", "epic", 198, 1978);
INSERT INTO
    songs (title, artist, mood, duration, released)
        VALUES ("Twist and Shout", "The Beatles", "happy", 152, 1963);
INSERT INTO
    songs (title, artist, mood, duration, released)
        VALUES ("La Bamba", "Ritchie Valens", "happy", 166, 1958);
INSERT INTO
    songs (title, artist, mood, duration, released)
        VALUES ("I will always love you", "Whitney Houston", "epic", 273, 1992);
INSERT INTO
    songs (title, artist, mood, duration, released)
        VALUES ("Sweet Caroline", "Neil Diamond", "happy", 201, 1969);
INSERT INTO
    songs (title, artist, mood, duration, released)
        VALUES ("Call me maybe", "Carly Rae Jepsen", "happy", 193, 2011);

SELECT
    title
FROM
    songs;

/*2.1.2 Add another SELECT that uses OR to show the titles of the songs that have an 'epic' mood or a release date after 1990.*/
    
SELECT
    title
FROM
    songs
WHERE
    mood = 'epic'
OR
    released > 1990; 

/*2.1.3 Add another SELECT that uses AND to show the titles of songs that are 'epic', and released after 1990, and less than 4 minutes long.*/

SELECT
    title
FROM
    songs
WHERE
    mood = 'epic'
AND
    released > 1990
AND
    duration < 240

/*END Part 2: Challenge 1 - Using AND/OR to Query*/

/*START: Part 2: Challenge 2 - Querying IN Subqueries*/

/*2.2.1 Below is a database of songs and artists, and you'll make playlists from them in this challenge.
First, select the title of all the songs by the artist named 'Queen'./*

CREATE TABLE artists (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    name TEXT,
    country TEXT,
    genre TEXT
    );

INSERT INTO
    artists (name, country, genre)
        VALUES ("Taylor Swift", "US", "Pop");
INSERT INTO
    artists (name, country, genre)
        VALUES ("Led Zeppelin", "US", "Hard rock");
INSERT INTO
    artists (name, country, genre)
        VALUES ("ABBA", "Sweden", "Disco");
INSERT INTO
    artists (name, country, genre)
        VALUES ("Queen", "UK", "Rock");
INSERT INTO
    artists (name, country, genre)
        VALUES ("Celine Dion", "Canada", "Pop");
INSERT INTO
    artists (name, country, genre)
        VALUES ("Meatloaf", "US", "Hard rock");
INSERT INTO
    artists (name, country, genre)
        VALUES ("Garth Brooks", "US", "Country");
INSERT INTO
    artists (name, country, genre)
        VALUES ("Shania Twain", "Canada", "Country");
INSERT INTO
    artists (name, country, genre)
        VALUES ("Rihanna", "US", "Pop");
INSERT INTO
    artists (name, country, genre)
        VALUES ("Guns N' Roses", "US", "Hard rock");
INSERT INTO
    artists (name, country, genre)
        VALUES ("Gloria Estefan", "US", "Pop");
INSERT INTO
    artists (name, country, genre)
        VALUES ("Bob Marley", "Jamaica", "Reggae");

CREATE TABLE songs (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    artist TEXT,
    title TEXT
    );

INSERT INTO
    songs (artist, title)
        VALUES ("Taylor Swift", "Shake it off");
INSERT INTO
    songs (artist, title)
        VALUES ("Rihanna", "Stay");
INSERT INTO
    songs (artist, title)
        VALUES ("Celine Dion", "My heart will go on");
INSERT INTO
    songs (artist, title)
        VALUES ("Celine Dion", "A new day has come");
INSERT INTO
    songs (artist, title)
        VALUES ("Shania Twain", "Party for two");
INSERT INTO
    songs (artist, title)
        VALUES ("Gloria Estefan", "Conga");
INSERT INTO
    songs (artist, title)
        VALUES ("Led Zeppelin", "Stairway to heaven");
INSERT INTO
    songs (artist, title)
        VALUES ("ABBA", "Mamma mia");
INSERT INTO
    songs (artist, title)
        VALUES ("Queen", "Bicycle Race");
INSERT INTO
    songs (artist, title)
        VALUES ("Queen", "Bohemian Rhapsody");
INSERT INTO
    songs (artist, title)
        VALUES ("Guns N' Roses", "Don't cry");
    
SELECT
    title
FROM
    songs
WHERE
    artist = "Queen";

/*2.2.2 Now you'll make a 'Pop' playlist. In preparation, select the name of all of the artists from the 'Pop' genre.*/

SELECT
    name
FROM
    artists
WHERE
    genre = "Pop"

/*2.2.3 To finish creating the 'Pop' playlist, add another query that will select the title of all the songs from the 'Pop' artists.
It should use IN on a nested subquery that's based on your previous query.*/

SELECT
    title
FROM
    songs
WHERE
    artist IN
        (
        SELECT
            name
        FROM
            artists
        WHERE
            genre = "Pop"
        );

/*END Part 2: Challenge 2 - Querying IN Subqueries*/
