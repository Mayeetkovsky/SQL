/*START Part 1: SQL Basics - Creating Tables and Inserting Data/Querying Tables/Aggregating Data*/

/*START Part 1: Challenge 1 - Creating Tables and Inserting Data*/

/*1.1.1 Create a database table to store a list of my favorite books.
It should have columns for id, name, and rating(scale of 1-5, 1 being lowest and 5 being highest.*/

CREATE TABLE
    favorite_books (
        id INTEGER PRIMARY KEY,
        name TEXT,
        rating INTEGER
    );

/*1.1.2 Add 3 of my favorite books to the table, and show them.*/

INSERT INTO
    favorite_books
        VALUES (1, "Don Quixote", 5);
INSERT INTO
    favorite_books
        VALUES (2, "Spare Parts", 3);
INSERT INTO
    favorite_books
        VALUES (3, "Redwall", 5);

SELECT
    *
FROM
    favorite_books;

/*END Part 1: Challenge 1 - Creating Tables and Inserting Data*/

/*START Part 1: Challenge 2 - Querying Tables*/

/*1.2.1 Select all the movies in the table below.*/

CREATE TABLE
  movies (
    id INTEGER PRIMARY KEY,
    name TEXT,
    release_year INTEGER
    );

INSERT INTO
  movies
    VALUES (1, "Avatar", 2009);
INSERT INTO
  movies
    VALUES (2, "Titanic", 1997);
INSERT INTO
  movies
    VALUES (3, "Star Wars: Episode IV - A New Hope", 1977);
INSERT INTO
  movies
    VALUES (4, "Shrek 2", 2004);
INSERT INTO
  movies
    VALUES (5, "The Lion King", 1994);
INSERT INTO
  movies
    VALUES (6, "Disney's Up", 2009);

 SELECT
    *
 FROM
    movies;

/*1.2.2 Add a second query after the first, that retrieves only the movies that were released in the year 2000 or later.
 Sort the results so that the earlier movies are listed first.*/

SELECT
    *
FROM
    movies
WHERE
    release_year >= 2000
ORDER BY
    release_year

/*END Part 1: Challenge 2 - Querying Tables*/

/*START Part 1: Challenge 3 - Aggregating Data*/

/*1.3.1 This table contains a TODO list with the number of minutes it will take to complete each item.
 Insert another item to your todo list with the estimated minutes it will take.*/

CREATE TABLE
  todo_list (
    id INTEGER PRIMARY KEY,
    item TEXT,
    minutes INTEGER
    );

INSERT INTO
  todo_list
    VALUES (1, "Wash the dishes", 15);
INSERT INTO
  todo_list
    VALUES (2, "vacuuming", 20);
INSERT INTO
  todo_list
    VALUES (3, "Learn some stuff on KA", 30);
INSERT INTO
  todo_list
    VALUES (4, "Chores", 25);

/*NOTE: "Change oil in car" was added to table*/

INSERT INTO
  todo_list
    VALUES (5, "Change oil in car", 20);

/*1.3.2 Select the SUM of minutes it will take to do all of the items on your TODO list*/

SELECT
    SUM(minutes)
FROM
    todo_list

/*END Part 1: Challenge 3 - Aggregating Data*/

/*END Part 1: SQL Basics - Creating Tables and Inserting Data/Querying Tables/Aggregating Data*/

/*START Part 2: More Advanced SQL Queries - Using AND/OR to Query/Querying IN Subqueries/Restricting Grouped Results with HAVING/
Calculating Results with CASE*/

/*START Part 2: Challenge 1 - Using AND/OR to Query*/

/*2.1.1 Below is a table with songs. Use queries to decide what songs to sing.
For the first step, select all the song titles.*/

CREATE TABLE songs (
    id INTEGER PRIMARY KEY,
    title TEXT,
    artist TEXT,
    mood TEXT,
    duration INTEGER,
    released INTEGER
    );
    
INSERT INTO
    songs (title, artist, mood, duration, released)
        VALUES ("Bohemian Rhapsody", "Queen", "epic", 60, 1975);
INSERT INTO
    songs (title, artist, mood, duration, released)
        VALUES ("Let it go", "Idina Menzel", "epic", 227, 2013);
INSERT INTO
    songs (title, artist, mood, duration, released)
        VALUES ("I will survive", "Gloria Gaynor", "epic", 198, 1978);
INSERT INTO
    songs (title, artist, mood, duration, released)
        VALUES ("Twist and Shout", "The Beatles", "happy", 152, 1963);
INSERT INTO
    songs (title, artist, mood, duration, released)
        VALUES ("La Bamba", "Ritchie Valens", "happy", 166, 1958);
INSERT INTO
    songs (title, artist, mood, duration, released)
        VALUES ("I will always love you", "Whitney Houston", "epic", 273, 1992);
INSERT INTO
    songs (title, artist, mood, duration, released)
        VALUES ("Sweet Caroline", "Neil Diamond", "happy", 201, 1969);
INSERT INTO
    songs (title, artist, mood, duration, released)
        VALUES ("Call me maybe", "Carly Rae Jepsen", "happy", 193, 2011);

SELECT
    title
FROM
    songs;

/*2.1.2 Add another SELECT that uses OR to show the titles of the songs that have an 'epic' mood or a release date after 1990.*/
    
SELECT
    title
FROM
    songs
WHERE
    mood = 'epic'
OR
    released > 1990; 

/*2.1.3 Add another SELECT that uses AND to show the titles of songs that are 'epic', and released after 1990, and less than 4 minutes long.*/

SELECT
    title
FROM
    songs
WHERE
    mood = 'epic'
AND
    released > 1990
AND
    duration < 240

/*END Part 2: Challenge 1 - Using AND/OR to Query*/

/*START: Part 2: Challenge 2 - Querying IN Subqueries*/

/*2.2.1 Below is a database of songs and artists, and you'll make playlists from them in this challenge.
First, select the title of all the songs by the artist named 'Queen'./*

CREATE TABLE artists (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    name TEXT,
    country TEXT,
    genre TEXT
    );

INSERT INTO
    artists (name, country, genre)
        VALUES ("Taylor Swift", "US", "Pop");
INSERT INTO
    artists (name, country, genre)
        VALUES ("Led Zeppelin", "US", "Hard rock");
INSERT INTO
    artists (name, country, genre)
        VALUES ("ABBA", "Sweden", "Disco");
INSERT INTO
    artists (name, country, genre)
        VALUES ("Queen", "UK", "Rock");
INSERT INTO
    artists (name, country, genre)
        VALUES ("Celine Dion", "Canada", "Pop");
INSERT INTO
    artists (name, country, genre)
        VALUES ("Meatloaf", "US", "Hard rock");
INSERT INTO
    artists (name, country, genre)
        VALUES ("Garth Brooks", "US", "Country");
INSERT INTO
    artists (name, country, genre)
        VALUES ("Shania Twain", "Canada", "Country");
INSERT INTO
    artists (name, country, genre)
        VALUES ("Rihanna", "US", "Pop");
INSERT INTO
    artists (name, country, genre)
        VALUES ("Guns N' Roses", "US", "Hard rock");
INSERT INTO
    artists (name, country, genre)
        VALUES ("Gloria Estefan", "US", "Pop");
INSERT INTO
    artists (name, country, genre)
        VALUES ("Bob Marley", "Jamaica", "Reggae");

CREATE TABLE songs (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    artist TEXT,
    title TEXT
    );

INSERT INTO
    songs (artist, title)
        VALUES ("Taylor Swift", "Shake it off");
INSERT INTO
    songs (artist, title)
        VALUES ("Rihanna", "Stay");
INSERT INTO
    songs (artist, title)
        VALUES ("Celine Dion", "My heart will go on");
INSERT INTO
    songs (artist, title)
        VALUES ("Celine Dion", "A new day has come");
INSERT INTO
    songs (artist, title)
        VALUES ("Shania Twain", "Party for two");
INSERT INTO
    songs (artist, title)
        VALUES ("Gloria Estefan", "Conga");
INSERT INTO
    songs (artist, title)
        VALUES ("Led Zeppelin", "Stairway to heaven");
INSERT INTO
    songs (artist, title)
        VALUES ("ABBA", "Mamma mia");
INSERT INTO
    songs (artist, title)
        VALUES ("Queen", "Bicycle Race");
INSERT INTO
    songs (artist, title)
        VALUES ("Queen", "Bohemian Rhapsody");
INSERT INTO
    songs (artist, title)
        VALUES ("Guns N' Roses", "Don't cry");
    
SELECT
    title
FROM
    songs
WHERE
    artist = "Queen";

/*2.2.2 Now you'll make a 'Pop' playlist. In preparation, select the name of all of the artists from the 'Pop' genre.*/

SELECT
    name
FROM
    artists
WHERE
    genre = "Pop"

/*2.2.3 To finish creating the 'Pop' playlist, add another query that will select the title of all the songs from the 'Pop' artists.
It should use IN on a nested subquery that's based on your previous query.*/

SELECT
    title
FROM
    songs
WHERE
    artist IN
        (
        SELECT
            name
        FROM
            artists
        WHERE
            genre = "Pop"
        );

/*END Part 2: Challenge 2 - Querying IN Subqueries*/

/*START Part 2: Challenge 3 - Restricting grouped results with HAVING*/

/*NOTE: HAVING is used with aggregated functions/results*/

/*2.3.1 Below is a database of a few popular authors and their books, with word counts for each book.
 Firstly, select all the authors who have written more than 1 million words, using GROUP BY and HAVING.
Your results table should include the 'author' and their total word count as a 'total_words' column.*/

CREATE TABLE
    books (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        author TEXT,
        title TEXT,
        words INTEGER
        );
    
INSERT INTO
    books (author, title, words)
        VALUES ("J.K. Rowling", "Harry Potter and the Philosopher's Stone", 79944);
INSERT INTO
    books (author, title, words)
        VALUES ("J.K. Rowling", "Harry Potter and the Chamber of Secrets", 85141);
INSERT INTO
    books (author, title, words)
        VALUES ("J.K. Rowling", "Harry Potter and the Prisoner of Azkaban", 107253);
INSERT INTO
    books (author, title, words)
        VALUES ("J.K. Rowling", "Harry Potter and the Goblet of Fire", 190637);
INSERT INTO
    books (author, title, words)
        VALUES ("J.K. Rowling", "Harry Potter and the Order of the Phoenix", 257045);
INSERT INTO
    books (author, title, words)
        VALUES ("J.K. Rowling", "Harry Potter and the Half-Blood Prince", 168923);
INSERT INTO
    books (author, title, words)
        VALUES ("J.K. Rowling", "Harry Potter and the Deathly Hallows", 197651);

INSERT INTO
    books (author, title, words)
        VALUES ("Stephenie Meyer", "Twilight", 118501);
INSERT INTO
    books (author, title, words)
        VALUES ("Stephenie Meyer", "New Moon", 132807);
INSERT INTO
    books (author, title, words)
        VALUES ("Stephenie Meyer", "Eclipse", 147930);
INSERT INTO
    books (author, title, words)
        VALUES ("Stephenie Meyer", "Breaking Dawn", 192196);
    
INSERT INTO
    books (author, title, words)
        VALUES ("J.R.R. Tolkien", "The Hobbit", 95022);
INSERT INTO
    books (author, title, words)
        VALUES ("J.R.R. Tolkien", "Fellowship of the Ring", 177227);
INSERT INTO
    books (author, title, words)
        VALUES ("J.R.R. Tolkien", "Two Towers", 143436);
INSERT INTO
    books (author, title, words)
        VALUES ("J.R.R. Tolkien", "Return of the King", 134462);

SELECT
    author, SUM(words) AS "total_words"
FROM
    books
GROUP BY
    author
HAVING
    SUM(words) > 1000000;

/*2.3.2 Now select all the authors that write more than an average of 150,000 words per book.
Your results table should include the 'author' and average words as an 'avg_words' column.*/

SELECT
    author, AVG(words) AS "avg_words"
FROM
    books
GROUP BY
    author
HAVING
    AVG(words) >= 150000;

/*END Part 2: Challenge 3 - Restricting grouped results with HAVING*/

/*START Part 2: Challenge 4 - Calculating results with CASE*/

/*2.4.1 Below is a database to track student grades, with their name, number grade, and what percent of activities they've completed.*/

CREATE TABLE student_grades (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    name TEXT,
    number_grade INTEGER,
    fraction_completed REAL
        );
    
INSERT INTO
    student_grades (name, number_grade, fraction_completed)
        VALUES ("Winston", 90, 0.805);
INSERT INTO
    student_grades (name, number_grade, fraction_completed)
        VALUES ("Winnefer", 95, 0.901);
INSERT INTO
    student_grades (name, number_grade, fraction_completed)
        VALUES ("Winsteen", 85, 0.906);
INSERT INTO
    student_grades (name, number_grade, fraction_completed)
        VALUES ("Wincifer", 66, 0.7054);
INSERT INTO
    student_grades (name, number_grade, fraction_completed)
        VALUES ("Winster", 76, 0.5013);
INSERT INTO
    student_grades (name, number_grade, fraction_completed)
        VALUES ("Winstonia", 82, 0.9045);

/*Firstly, select all of the rows, and display the name, number_grade, and percent_completed, which you can compute by multiplying
and rounding the fraction_completed column.*/

SELECT
    name,
    number_grade,
    ROUND(fraction_completed * 100) AS percent_completed
FROM
    student_grades;

/*2.4.2 The goal is a table that shows how many students have earned which letter_grade.
You can output the letter_grade by using CASE with the number_grade column,
outputting 'A' for grades > 90, 'B' for grades > 80, 'C' for grades > 70, and 'F' otherwise.
Then you can use COUNT with GROUP BY to show the number of students with each of those grades.*/

SELECT
    COUNT(*)
    name,
    CASE
        WHEN number_grade > 90 THEN "A"
        WHEN number_grade > 80 THEN "B"
        WHEN number_grade > 70 THEN "C"
        ELSE "F"
    END AS "letter_grade"
FROM
    student_grades
GROUP BY
    letter_grade;

/*END Part 2: Challenge 4 - Calculating results with CASE*/

/*END Part 2: More Advanced SQL Queries - Using AND/OR to Query/Querying IN Subqueries/Restricting Grouped Results with HAVING/
Calculating Results with CASE*/

/*START Part 3: Relational queries in SQL - JOINing Related Tables/Joining Related Tables with Left Outer Join/
Joining Tables to Themselves with Self-Joins/Combining Multiple Joins*/

/*START Part 3: Challenge 1 - JOINing Related Tables*/

/*3.1.1 Below is a database of people and hobbies, and each row in hobbies is related to a row in persons via the person_id column.
Firstly, insert one more row in persons and then one more row in hobbies that is related to the newly inserted person.*/

CREATE TABLE persons (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    name TEXT,
    age INTEGER
    );

/*NOTE: "Nick Pitt" inserted into persons table.*/

INSERT INTO
    persons (name, age)
        VALUES ("Bobby McBobbyFace", 12);
INSERT INTO
    persons (name, age)
        VALUES ("Lucy BoBucie", 25);
INSERT INTO
    persons (name, age)
        VALUES ("Banana FoFanna", 14);
INSERT INTO
    persons (name, age)
        VALUES ("Shish Kabob", 20);
INSERT INTO
    persons (name, age)
        VALUES ("Fluffy Sparkles", 8);
INSERT INTO
    persons (name, age)
        VALUES ("Nick Pitt", 19);

CREATE table hobbies (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    person_id INTEGER,
    name TEXT
    );

/*NOTE: "parkour" insterted into hobbies table.*/

INSERT INTO
    hobbies (person_id, name)
        VALUES (1, "drawing");
INSERT INTO
    hobbies (person_id, name)
        VALUES (1, "coding");
INSERT INTO
    hobbies (person_id, name)
        VALUES (2, "dancing");
INSERT INTO
    hobbies (person_id, name)
        VALUES (2, "coding");
INSERT INTO
    hobbies (person_id, name)
        VALUES (3, "skating");
INSERT INTO
    hobbies (person_id, name)
        VALUES (3, "rowing");
INSERT INTO
    hobbies (person_id, name)
        VALUES (3, "drawing");
INSERT INTO
    hobbies (person_id, name)
        VALUES (4, "coding");
INSERT INTO
    hobbies (person_id, name)
        VALUES (4, "dilly-dallying");
INSERT INTO
    hobbies (person_id, name)
        VALUES (4, "meowing");
INSERT INTO
    hobbies (person_id, name)
        VALUES (6, "parkour");

/*3.1.2 Now, select the 2 tables with a join so that you can see each person's name next to their hobby.*/

SELECT
    persons.name,
    hobbies.name
FROM
    persons, hobbies
WHERE
    persons.id = hobbies.person_id;

/*3.1.3 Now, add an additional query that shows only the name and hobbies of 'Bobby McBobbyFace', using JOIN combined with WHERE.*/

SELECT
    persons.name,
    hobbies.name
FROM
    persons, hobbies
WHERE
    persons.id = hobbies.person_id;
    
SELECT
    persons.name,
    hobbies.name
FROM
    persons
JOIN
    hobbies
ON
    persons.id = hobbies.person_id
WHERE
    persons.name = "Bobby McBobbyFace"

/*END Part 3: Challenge 1 - JOINing Related Tables*/

/*START Part 3: Challenge 2 - Joining Related Tables with Left Outer Join*/

/*3.2.1 Below is a database for customers and their orders. Not all of the customers have made orders, however.
Come up with a query that lists the name and email of every customer followed by the item and price of orders they've made.
Use a LEFT OUTER JOIN so that a customer is listed even if they've made no orders, and don't add any ORDER BY.*/

CREATE TABLE customers (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    name TEXT,
    email TEXT
    );
    
INSERT INTO
    customers (name, email)
        VALUES ("Doctor Who", "doctorwho@timelords.com");
INSERT INTO
    customers (name, email)
        VALUES ("Harry Potter", "harry@potter.com");
INSERT INTO
    customers (name, email)
        VALUES ("Captain Awesome", "captain@awesome.com");

CREATE TABLE orders (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    customer_id INTEGER,
    item TEXT,
    price REAL
    );

INSERT INTO
    orders (customer_id, item, price)
        VALUES (1, "Sonic Screwdriver", 1000.00);
INSERT INTO
    orders (customer_id, item, price)
        VALUES (2, "High Quality Broomstick", 40.00);
INSERT INTO
    orders (customer_id, item, price)
        VALUES (1, "TARDIS", 1000000.00);

SELECT
    customers.name,
    customers.email,
    orders.item,
    orders.price
FROM
    customers
LEFT OUTER JOIN
    orders
ON
    customers.id = orders.customer_id;

/*3.2.2 Create another query that will result in one row per each customer, with their name, email, and total amount of money they've spent on orders.
Sort the rows according to the total money spent, from the most spent to the least spent.
(Tip: You should always GROUP BY on the column that is most likely to be unique in a row.)*/

SELECT
    customers.name,
    customers.email,
    SUM(orders.price) AS total_spent
FROM
    customers
LEFT OUTER JOIN
    orders
ON
    customers.id = orders.customer_id
GROUP BY
    customers.email
ORDER BY
    total_spent DESC;
/*END Part 3: Challenge 2 - Joining Related Tables with Left Outer Join*/
